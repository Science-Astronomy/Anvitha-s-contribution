<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>SkyPath — Pick the Greener Route</title>
  <style>
    :root{
      --bg:#f0f7ff; --ink:#0b2545; --muted:#5c6b7a; --accent:#2a9d8f; --warn:#e76f51; --grid:#d7e3f0;
      --cell:54px; --radius:12px;
    }
    html,body{height:100%;margin:0}
    body{font-family:system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;background:var(--bg);color:var(--ink);display:flex;align-items:center;justify-content:center}
    .app{width:min(1100px,96vw);margin:18px}
    header{display:flex;gap:12px;align-items:center;justify-content:space-between;margin-bottom:12px}
    h1{font-size:22px;margin:0}
    .subtitle{font-size:14px;color:var(--muted)}
    .board-wrap{display:grid;grid-template-columns:1fr 320px;gap:16px}
    #grid{display:grid;grid-template-columns:repeat(var(--cols), var(--cell));grid-auto-rows:var(--cell);gap:4px;background:white;padding:12px;border-radius:var(--radius);box-shadow:0 10px 30px rgba(0,0,0,.08);}
    .cell{width:var(--cell);height:var(--cell);border-radius:10px;background:#fff;border:1px solid var(--grid);position:relative;cursor:pointer;user-select:none;display:flex;align-items:center;justify-content:center;font-size:12px;color:#113a5a}
    .cell.hazard{background:linear-gradient(135deg,#ffe9e3,#ffd2c7);border-color:#ffb8a7}
    .cell.contrail{background:linear-gradient(135deg,#e7f0ff,#d7e8ff);border-color:#c3d7ff}
    .cell.tailwind{background:linear-gradient(135deg,#e6fbf5,#d6f6ee);border-color:#bceddf}
    .cell.nofly{background:repeating-linear-gradient(135deg,#222 0 8px,#333 8px 16px); color:#fff; border-color:#000}
    .cell.start{outline:3px solid #2a9d8f}
    .cell.goal{outline:3px solid #ffb703}
    .chip{position:absolute;inset:auto auto 6px 6px;background:rgba(255,255,255,.85);padding:2px 6px;border-radius:10px;border:1px solid #e5edf6;font-size:10px}
    .path{position:absolute;inset:0;border-radius:10px;}
    .path::after{content:"";position:absolute;inset:0;border-radius:10px;box-shadow:0 0 0 3px rgba(42,157,143,.6) inset}
    .panel{background:white;border-radius:var(--radius);padding:14px;box-shadow:0 10px 30px rgba(0,0,0,.08)}
    .legend{display:grid;grid-template-columns:1fr 1fr;gap:10px;margin:10px 0 6px}
    .tag{display:flex;align-items:center;gap:8px;font-size:12px;color:#234;}
    .swatch{width:18px;height:18px;border-radius:6px;border:1px solid #c9d6e5}
    .swatch.hazard{background:linear-gradient(135deg,#ffe9e3,#ffd2c7);border-color:#ffb8a7}
    .swatch.contrail{background:linear-gradient(135deg,#e7f0ff,#d7e8ff);border-color:#c3d7ff}
    .swatch.tailwind{background:linear-gradient(135deg,#e6fbf5,#d6f6ee);border-color:#bceddf}
    .swatch.nofly{background:repeating-linear-gradient(135deg,#222 0 8px,#333 8px 16px); border-color:#000}
    .controls{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px}
    button{background:var(--ink);color:#fff;border:none;padding:10px 14px;border-radius:10px;cursor:pointer}
    button.secondary{background:#e9eef5;color:#0b2545}
    button:disabled{opacity:.6;cursor:not-allowed}
    .scorecard{margin-top:10px;border-top:1px dashed #dde6f3;padding-top:10px}
    .score{font-size:28px;font-weight:700}
    .explain{font-size:13px;color:#3b5168}
    .stars{font-size:18px;letter-spacing:2px}
    .tip{font-size:12px;color:#5a6a79;margin-top:6px}
    footer{margin-top:10px;font-size:12px;color:#5b6774}
    @media (max-width:920px){
      .board-wrap{grid-template-columns:1fr}
    }
  </style>
</head>
<body>
  <div class="app">
    <header>
      <div>
        <h1>✈️ SkyPath — Pick the Greener Route</h1>
        <div class="subtitle">Draw a path from <b>START</b> to <b>DESTINATION</b>. Shorter paths use less fuel. Avoid hazards (storms), no‑fly zones, and contrail zones. Catch tailwinds!</div>
      </div>
      <div class="controls">
        <button id="newMap">New Map</button>
        <button id="undo" class="secondary">Undo</button>
        <button id="clear" class="secondary">Clear Path</button>
        <button id="finish">Finish & Score</button>
      </div>
    </header>

    <div class="board-wrap">
      <div id="grid" aria-label="SkyPath grid" role="grid"></div>
      <aside class="panel">
        <b>Legend</b>
        <div class="legend">
          <div class="tag"><span class="swatch hazard"></span>Storm ↑ fuel</div>
          <div class="tag"><span class="swatch contrail"></span>Contrail zone</div>
          <div class="tag"><span class="swatch tailwind"></span>Tailwind ↓ fuel</div>
          <div class="tag"><span class="swatch nofly"></span>No‑fly (blocked)</div>
        </div>
        <div class="scorecard">
          <div>Score</div>
          <div class="score" id="score">—</div>
          <div class="stars" id="stars"></div>
          <div class="explain" id="explain">Draw a path to calculate your score.</div>
          <div class="tip">Tip: Diagonal moves aren’t allowed. Click the next cell next to your plane to draw.
          </div>
        </div>
        <footer>Educational idea: Each step ≈ fuel burn. Hazards add extra burn. Tailwinds help.
        </footer>
      </aside>
    </div>
  </div>

<script>
(function(){
  const gridEl = document.getElementById('grid');
  const scoreEl = document.getElementById('score');
  const explainEl = document.getElementById('explain');
  const starsEl = document.getElementById('stars');
  const undoBtn = document.getElementById('undo');
  const clearBtn = document.getElementById('clear');
  const finishBtn = document.getElementById('finish');
  const newMapBtn = document.getElementById('newMap');

  // Config
  const rows = 12, cols = 12;
  document.documentElement.style.setProperty('--cols', cols);

  // Cell types
  const EMPTY = 0, HAZARD = 1, CONTRAIL = 2, TAILWIND = 3, NOFLY = 4;

  // Scoring weights (tweak to taste)
  const COST_STEP = 10;        // base per move
  const COST_HAZARD = 30;      // extra for storms
  const COST_CONTRAIL = 15;    // extra for contrails
  const BONUS_TAILWIND = -8;   // tailwind helps

  let grid = [], start = null, goal = null, path = []; // path: array of {r,c}

  function rnd(min,max){return Math.floor(Math.random()*(max-min+1))+min}
  function key(rc){return rc.r+','+rc.c}

  function genMap(){
    grid = Array.from({length:rows},()=>Array(cols).fill(EMPTY));

    // Scatter features with simple probabilities
    for(let r=0;r<rows;r++){
      for(let c=0;c<cols;c++){
        const roll = Math.random();
        if(roll<0.08) grid[r][c]=NOFLY;          // 8%
        else if(roll<0.18) grid[r][c]=HAZARD;    // 10%
        else if(roll<0.30) grid[r][c]=CONTRAIL;  // 12%
        else if(roll<0.42) grid[r][c]=TAILWIND;  // 12%
      }
    }

    // Choose start & goal on different edges, ensure empty
    const edges = [
      ...Array(cols).fill(0).map((_,c)=>({r:0,c})),
      ...Array(cols).fill(0).map((_,c)=>({r:rows-1,c})),
      ...Array(rows).fill(0).map((_,r)=>({r,c:0})),
      ...Array(rows).fill(0).map((_,r)=>({r,c:cols-1})),
    ];

    function pickEmptyEdge(){
      let rc;
      do{ rc = edges[rnd(0,edges.length-1)]; }while(grid[rc.r][rc.c]===NOFLY);
      return {...rc};
    }

    start = pickEmptyEdge();
    do{ goal = pickEmptyEdge(); }while(key(goal)===key(start));

    // Clear around start/goal for fairness
    for(const p of [start, goal]){
      for(let dr=-1;dr<=1;dr++) for(let dc=-1;dc<=1;dc++){
        const rr=p.r+dr, cc=p.c+dc;
        if(rr>=0&&rr<rows&&cc>=0&&cc<cols && !(rr===goal.r && cc===goal.c)) grid[rr][cc]=EMPTY;
      }
    }

    path = [start];
    render();
    updateScore();
  }

  function render(){
    gridEl.innerHTML='';
    for(let r=0;r<rows;r++){
      for(let c=0;c<cols;c++){
        const d = document.createElement('div');
        d.className='cell';
        d.setAttribute('role','gridcell');
        d.dataset.r=r; d.dataset.c=c;
        if(grid[r][c]===HAZARD) d.classList.add('hazard');
        if(grid[r][c]===CONTRAIL) d.classList.add('contrail');
        if(grid[r][c]===TAILWIND) d.classList.add('tailwind');
        if(grid[r][c]===NOFLY) d.classList.add('nofly');
        if(r===start.r&&c===start.c){ d.classList.add('start'); d.innerHTML='<div class="chip">START</div>'; }
        if(r===goal.r&&c===goal.c){ d.classList.add('goal'); d.innerHTML='<div class="chip">DEST</div>'; }
        if(path.some(p=>p.r===r&&p.c===c)){
          const pth = document.createElement('div');
          pth.className='path'; d.appendChild(pth);
        }
        gridEl.appendChild(d);
      }
    }
  }

  function isAdjacent(a,b){
    return (Math.abs(a.r-b.r)+Math.abs(a.c-b.c))===1; // 4-dir only
  }

  function tryStep(to){
    const last = path[path.length-1];
    if(to.r===last.r && to.c===last.c) return; // same cell
    if(!isAdjacent(last, to)) return;          // must be neighbor
    if(grid[to.r][to.c]===NOFLY) return;       // blocked
    // avoid revisiting (optional): allow but trim loops
    const exists = path.findIndex(p=>p.r===to.r && p.c===to.c);
    if(exists>=0){ path = path.slice(0, exists+1); }
    else { path.push(to); }
    render();
    updateScore();
  }

  gridEl.addEventListener('click', (e)=>{
    const cell = e.target.closest('.cell');
    if(!cell) return;
    const r = +cell.dataset.r, c = +cell.dataset.c;
    const last = path[path.length-1];
    // First click after start must be adjacent
    if(path.length===1 && !(Math.abs(r-start.r)+Math.abs(c-start.c)===1)) return;
    tryStep({r,c});
  });

  undoBtn.addEventListener('click',()=>{
    if(path.length>1){ path.pop(); render(); updateScore(); }
  });

  clearBtn.addEventListener('click',()=>{ path=[start]; render(); updateScore(); });

  finishBtn.addEventListener('click',()=>{
    const atGoal = key(path[path.length-1])===key(goal);
    if(!atGoal){
      explainEl.textContent = 'Reach DEST to get a final score. Keep drawing!';
      return;
    }
    // Add a short celebratory nudge
    starsEl.textContent = starsFromScore(currentScore.total) + ' Great piloting!';
  });

  newMapBtn.addEventListener('click', genMap);

  let currentScore = { total:0, detail:'' };
  function updateScore(){
    const detail = scorePath(path);
    currentScore = detail;
    scoreEl.textContent = detail.total.toFixed(0);
    starsEl.textContent = starsFromScore(detail.total);
    explainEl.innerHTML = detail.explain;
  }

  function starsFromScore(s){
    if(s>=900) return '★★★★★';
    if(s>=700) return '★★★★☆';
    if(s>=500) return '★★★☆☆';
    if(s>=300) return '★★☆☆☆';
    return '★☆☆☆☆';
  }

  function scorePath(pth){
    let steps = Math.max(0, pth.length-1);
    let hazard=0, contrail=0, tail=0;
    for(let i=1;i<pth.length;i++){
      const {r,c}=pth[i];
      if(grid[r][c]===HAZARD) hazard++;
      if(grid[r][c]===CONTRAIL) contrail++;
      if(grid[r][c]===TAILWIND) tail++;
    }
    const base = steps*COST_STEP;
    const extra = hazard*COST_HAZARD + contrail*COST_CONTRAIL + tail*BONUS_TAILWIND;
    // Bonus for actually reaching destination
    const atGoal = key(pth[pth.length-1])===key(goal);
    const reachBonus = atGoal ? 100 : 0;
    const total = Math.max(0, base + extra + reachBonus);

    const explain = `Steps: <b>${steps}</b> × ${COST_STEP} = <b>${base}</b><br>
      Storm cells: <b>${hazard}</b> × ${COST_HAZARD} = <b>${hazard*COST_HAZARD}</b><br>
      Contrail cells: <b>${contrail}</b> × ${COST_CONTRAIL} = <b>${contrail*COST_CONTRAIL}</b><br>
      Tailwind cells: <b>${tail}</b> × ${BONUS_TAILWIND} = <b>${tail*BONUS_TAILWIND}</b><br>
      ${atGoal?`Destination bonus: <b>${reachBonus}</b><br>`:''}
      <hr style="border:none;border-top:1px dashed #dde6f3">Total: <b>${total}</b>`;

    return { total, explain };
  }

  // Keyboard support: arrows to step
  window.addEventListener('keydown',(e)=>{
    const last = path[path.length-1];
    const dirs = { ArrowUp:{r:-1,c:0}, ArrowDown:{r:1,c:0}, ArrowLeft:{r:0,c:-1}, ArrowRight:{r:0,c:1} };
    if(!dirs[e.key]) return;
    const nr = last.r + dirs[e.key].r, nc = last.c + dirs[e.key].c;
    if(nr<0||nr>=rows||nc<0||nc>=cols) return;
    tryStep({r:nr,c:nc});
  });

  // Initialize
  genMap();
})();
</script>
</body>
</html>
